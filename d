[1mdiff --git a/ads/migrations/0004_alter_result_click_alter_result_conversion_and_more.py b/ads/migrations/0004_alter_result_click_alter_result_conversion_and_more.py[m
[1mnew file mode 100644[m
[1mindex 0000000..0b8ce25[m
[1m--- /dev/null[m
[1m+++ b/ads/migrations/0004_alter_result_click_alter_result_conversion_and_more.py[m
[36m@@ -0,0 +1,38 @@[m
[32m+[m[32m# Generated by Django 4.0.4 on 2022-04-28 12:05[m
[32m+[m
[32m+[m[32mfrom django.db import migrations, models[m
[32m+[m
[32m+[m
[32m+[m[32mclass Migration(migrations.Migration):[m
[32m+[m
[32m+[m[32m    dependencies = [[m
[32m+[m[32m        ('ads', '0003_alter_ad_uid_alter_result_date_alter_result_media'),[m
[32m+[m[32m    ][m
[32m+[m
[32m+[m[32m    operations = [[m
[32m+[m[32m        migrations.AlterField([m
[32m+[m[32m            model_name='result',[m
[32m+[m[32m            name='click',[m
[32m+[m[32m            field=models.PositiveIntegerField(default=0),[m
[32m+[m[32m        ),[m
[32m+[m[32m        migrations.AlterField([m
[32m+[m[32m            model_name='result',[m
[32m+[m[32m            name='conversion',[m
[32m+[m[32m            field=models.PositiveIntegerField(default=0),[m
[32m+[m[32m        ),[m
[32m+[m[32m        migrations.AlterField([m
[32m+[m[32m            model_name='result',[m
[32m+[m[32m            name='cost',[m
[32m+[m[32m            field=models.PositiveIntegerField(default=0),[m
[32m+[m[32m        ),[m
[32m+[m[32m        migrations.AlterField([m
[32m+[m[32m            model_name='result',[m
[32m+[m[32m            name='cv',[m
[32m+[m[32m            field=models.PositiveIntegerField(default=0),[m
[32m+[m[32m        ),[m
[32m+[m[32m        migrations.AlterField([m
[32m+[m[32m            model_name='result',[m
[32m+[m[32m            name='impression',[m
[32m+[m[32m            field=models.PositiveIntegerField(default=0),[m
[32m+[m[32m        ),[m
[32m+[m[32m    ][m
[1mdiff --git a/ads/models.py b/ads/models.py[m
[1mindex d4fa4b1..e8569e3 100644[m
[1m--- a/ads/models.py[m
[1m+++ b/ads/models.py[m
[36m@@ -2,10 +2,11 @@[m [mfrom django.db import models[m
 from django.forms import SelectDateWidget[m
 [m
 from core.models import TimeStampModel[m
[31m-[m
[32m+[m[41m   [m
 [m
 class Ad(TimeStampModel):[m
[31m-    user = models.ForeignKey('users.User', db_index=True, on_delete=models.CASCADE)  # 광고주 id[m
[32m+[m[32m    user = models.ForeignKey('users.User', db_index=True, on_delete=models.CASCADE)  # 광고주 id[m[41m    [m
[32m+[m[32m    #uid = models.AutoField( db_index=True, primary_key=True)  # 해당 광고 고유 번호 , 자동 증가추가[m
     uid = models.CharField(max_length=50, db_index=True, primary_key=True)  # 해당 광고 고유 번호[m
     start_date = models.DateField(null=True, blank=True)  # 광고 시작 날짜[m
     end_date = models.DateField(null=True, blank=True)  # 광고 종료 날짜[m
[36m@@ -22,11 +23,11 @@[m [mclass Result(TimeStampModel):[m
     ad = models.ForeignKey('Ad', on_delete=models.CASCADE, db_index=True)[m
     media = models.CharField(max_length=15, db_index=True)[m
     date = models.DateField(db_index=True)[m
[31m-    cost = models.PositiveIntegerField()[m
[31m-    impression = models.PositiveIntegerField()[m
[31m-    click = models.PositiveIntegerField()[m
[31m-    conversion = models.PositiveIntegerField()[m
[31m-    cv = models.PositiveIntegerField()[m
[32m+[m[32m    cost = models.PositiveIntegerField(default=0)[m
[32m+[m[32m    impression = models.PositiveIntegerField(default=0)[m
[32m+[m[32m    click = models.PositiveIntegerField(default=0)[m
[32m+[m[32m    conversion = models.PositiveIntegerField(default=0)[m
[32m+[m[32m    cv = models.PositiveIntegerField(default=0)[m
 [m
     class Meta :[m
         db_table = 'results'[m
[1mdiff --git a/ads/views.py b/ads/views.py[m
[1mindex 0e890c4..e77885e 100644[m
[1m--- a/ads/views.py[m
[1m+++ b/ads/views.py[m
[36m@@ -4,9 +4,11 @@[m [mfrom django.views.decorators.csrf import csrf_exempt[m
 from rest_framework import viewsets[m
 from rest_framework import status[m
 from rest_framework.response import Response[m
[31m-from .models import Ad ,Result[m
[31m-from .serializers import AdSerializer,ResultSerializer[m
[32m+[m[32mfrom .models import Ad, Result[m
[32m+[m[32mfrom .serializers import AdSerializer, ResultSerializer[m
 from rest_framework.decorators import api_view[m
[32m+[m[32mfrom datetime import datetime, timedelta[m
[32m+[m
 [m
 @api_view(['GET'])[m
 def ad_list(request):[m
[36m@@ -33,45 +35,59 @@[m [mdef ad_detail(request, pk):[m
 [m
     if request.method == 'GET':[m
         serializer = AdSerializer(ad)[m
[31m-        return JsonResponse(serializer.data)    [m
[31m-[m
[32m+[m[32m        return JsonResponse(serializer.data)[m
 [m
[31m-@api_view(['POST','GET','DELETE'])[m
[32m+[m[32m#다른 코드가 정리되면 GET은 삭제하고 URL을 변경할 예정입니다[m
[32m+[m[32m@api_view(['POST', 'GET'])[m
 def get_create_ad(request):[m
     """[m
     김석재[m
     """[m
[31m-    print(request.method)[m
[31m-    # ad=Ad()[m
[31m-    # result=Result()[m
[31m-    #(필수) media, start date, end date (기간)[m
[31m-    #(선택) budget (집행 예산), estimated_spend(일일 집행 예산), location (집행 지역), kpi(목표치)[m
[31m-    if request.method == 'GET':        [m
[31m-        ads = Ad.objects.last()[m
[31m-        res = Result.objects.last()[m
[31m-        res1 = Result.objects.filter(id=5)[m
[31m-        serializer = AdSerializer(ads)#, many=True)[m
[31m-        serializer1 = ResultSerializer(res)[m
[31m-        serializer2 = ResultSerializer(res1 ,many=True)[m
[31m-[m
[31m-        return Response(serializer1.data)[m
     [m
[31m-    #테스트 중인데 POST를 인식을 못한다 홀리.. DELETE도 인식안됨[m
[31m-    elif request.method == 'POST':        [m
[31m-        print(request.POST)[m
[31m-        # ad.start_date = request.data['start_date'][m
[31m-        # ad.end_date = request.data['end_date']     [m
[31m-        # ad.save()[m
[31m-        # result.ad = ad.uid[m
[31m-        # result.media = request.data['media'][m
[31m-        # result.save()[m
[31m-        #serializer = AdSerializer(ad)[m
[32m+[m[32m    # 필수 입력값 4개(ad) + 1개 (result) 입력시 ad를 하나(캠페인)생성 , 기간에 따라 하루마다 하나씩 result를 생성[m
[32m+[m[32m    if request.method == 'POST':[m
[32m+[m
[32m+[m[32m        start_date = request.data['start_date'][m
[32m+[m[32m        end_date   = request.data['end_date'][m
[32m+[m[32m        user_id    = request.data['user_id'][m
[32m+[m[32m        media      = request.data['media'][m
[32m+[m[32m        uid        = request.data['uid'][m[41m        [m
[32m+[m
[32m+[m[32m        new_ad = Ad.objects.create([m
[32m+[m[32m            start_date = start_date,[m
[32m+[m[32m            end_date   = end_date,[m
[32m+[m[32m            user_id    = user_id,[m
[32m+[m[32m            uid        = uid[m
[32m+[m[32m        )[m
         [m
[31m-        ads = Ad.objects.last()[m
[31m-        serializer1 = AdSerializer(ads)#, many=True)[m
[31m-        return Response(serializer1.data)[m
[31m-    [m
[32m+[m[32m        #필수 데이터 외에 추가데이터[m
[32m+[m[32m        if 'budget' in request.data:[m
[32m+[m[32m            new_ad.budget          = request.data['budget'][m
[32m+[m[32m        if 'estimated_spend' in request.data:[m
[32m+[m[32m            new_ad.estimated_spend = request.data['estimated_spend'][m
[32m+[m
[32m+[m[32m        #end-start day로 차이나는 값 만큼 result를 생성 (최소1)[m
[32m+[m[32m        start = datetime.strptime(start_date, '%Y-%m-%d')[m
[32m+[m[32m        end   = datetime.strptime(end_date, '%Y-%m-%d')[m
[32m+[m[32m        day   = end - start[m
[32m+[m[41m        [m
[32m+[m[32m        for day